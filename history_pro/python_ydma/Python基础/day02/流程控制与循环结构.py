#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Created by xiaoming

# 本模块的功能:<# 流程控制与循环结构>

'''

流程控制
流程： 计算机执行代码的顺序，就是流程。

流程控制： 对计算机代码执行顺序的控制，就是流程控制。

流程分类： 流程控制一共分为三类，分别是 顺序结构、分支(选择)结构、循环结构。

顺序结构
顺序结构就是代码一种自上而下执行的结构，这是Python默认的流程。

分支(选择)结构
分支结构一共分为4类，分别是 单项分支、双项分支、多项分支、巢状分支



'''
# 循环结构
# 循环结构可以减少源程序重复书写的工作量(代码量)，用来描述重复执行某段算法的问题，这是程序设计中最能发挥计算机特长的程序结构。
#
# Python中循环结构分为两类，分别是 while 和 for .. in
#
# while
# 格式1：

num1,num2 = 3,5
while num1 < num2:
    print('如果条件成立，会进入循环体，我所处的这块区域，就是循环体')
    num1 += 1   #控制循环条件中的变量，否则进入死循环
# 死循环： 死循环就是循环不会终止的循环类型，设置条件永远为True来实现，但非常占用资源

# 格式2：

num1,num2 = 3,5
while num1 < num2:
    print('如果条件成立，会进入循环体')
    num1 += 1
else:
    print('条件不成立时，我会被输出')
# 注意： while循环中的else是在while条件表达式为假的情况下执行的代码内容
#
# for ... in
# for 变量 in 容器：用于遍历容器类的数据(字符串，列表，元组，字典，集合)
#
# 格式1：

user_list = ['小明','小红','小强','小军']
for val in user_list:
    print(val)
# 格式2：

data = ('a','alibaba'),('b','baidu'),('c','changhong')
for k,v in data:
    print(k,'======>',v)
# 使用格式2请注意： 要求遍历的容器必须是以下几种格式
#
# [(),(),()]    列表中有元组
# [[],[],[]]    列表中有列表
# ((),(),())    元组中有元组
# {(),(),()}    集合中有元组
# 字典的特殊使用
# 格式3：

data = ('a','b','c','d','e')
for v in data:
    print(v)
else:
    print('我else区间又来啦！')















'''
当你的才华还撑不起你的野心时,那你就应该静下心来学习
当你的能力还驾驭不了你的目标时,那就应该沉下心来历练
'''
